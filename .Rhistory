install.packages("KnitR")
install.packages("knitr")
install.packages("knitr")
remotes::install_github('yihui/knitr')
remotes::install_github('rmarkdown')
install.packages("rmarkdown")
install.packages("rmarkdown")
## LOAD PACKAGES ####
library(dplyr) # this is a package that makes handling data easier
library(ggplot2) # this is a package that makes nice graphs
## LOAD IN DATA ####
dialect_data = read.csv("HSS8005_dialectdata.csv")
table(dialect_data$foot_strut)
table(dialect_data$foot_strut, dialect_data$age_group)
foot_strut.tab
foot_strut.tab = table(dialect_data$foot_strut, dialect_data$age_group)
foot_strut.tab
prop.table(foot_strut.tab, 2)
foot_strut.prop.tab = prop.table(foot_strut.tab, 2)
# WRONG WAY AROUND
prop.table(foot_strut.tab, 1)
dialect_data %>%
group_by(age_group) %>% # the independent variable
count(foot_strut) %>% # the dependent variable
mutate(prop = prop.table(n))
# here you can look at another independent variable's affect on foot_strut
barplot(foot_strut.tab)
#create a barplot with the proportions of foot_strut instead of raw numbers
levels(dialect_data$age_group)
# reordering
dialect_data$age_group_ordered = factor(dialect_data$age_group,levels(dialect_data$age_group)[c(3, 1, 2)])
#having a look at new order
levels(dialect_data$age_group_ordered)
ggplot(dialect_data, aes(age_group_ordered, fill = foot_strut)) +
geom_bar(position="fill")
ggplot(dialect_data, aes(age_group_ordered, fill = foot_strut)) +
geom_bar(position="fill") +
xlab("age group")
ggplot(dialect_data, aes(age_group_ordered, fill = foot_strut)) +
geom_bar(position="fill") +
xlab("age group") +
theme(legend.position = "bottom")
ggplot(dialect_data, aes(age_group_ordered, fill = foot_strut)) +
geom_bar(position="fill") +
xlab("age group") +
theme(legend.position = "bottom") +
scale_fill_manual(values = c("red", "yellow"))
#my ggplot with new colours
ggplot(dialect_data, aes(age_group_ordered, fill = foot_strut)) +
geom_bar(position="fill") +
scale_fill_brewer(palette="Set1")
1+3
levels(dialect_data$age_group)
## LOAD PACKAGES ####
library(dplyr) # this is a package that makes handling data easier
library(ggplot2) # this is a package that makes nice graphs
## LOAD IN DATA ####
dialect_data = read.csv("HSS8005_dialectdata.csv")
dim(dialect_data)
head(dialect_data)
tail(dialect_data)
colnames(dialect_data)
table(dialect_data$foot_strut)
table(dialect_data$foot_strut, dialect_data$age_group)
#your code here for your choice of independent variable
foot_strut.tab = table(dialect_data$foot_strut, dialect_data$age_group)
foot_strut.tab
prop.table(foot_strut.tab, 2)
foot_strut.prop.tab = prop.table(foot_strut.tab, 2)
# WRONG WAY AROUND
prop.table(foot_strut.tab, 1)
dialect_data %>%
group_by(age_group) %>% # the independent variable
count(foot_strut) %>% # the dependent variable
mutate(prop = prop.table(n))
# here you can look at another independent variable's affect on foot_strut
barplot(foot_strut.tab)
levels(dialect_data$age_group)
# reordering
dialect_data$age_group_ordered = factor(dialect_data$age_group,levels(dialect_data$age_group)[c(3, 1, 2)])
#having a look at new order
levels(dialect_data$age_group_ordered)
ggplot(dialect_data, aes(age_group_ordered, fill = foot_strut)) +
geom_bar(position="fill")
ggplot(dialect_data, aes(age_group_ordered, fill = foot_strut)) +
geom_bar(position="fill") +
xlab("age group")
ggplot(dialect_data, aes(age_group_ordered, fill = foot_strut)) +
geom_bar(position="fill") +
xlab("age group") +
theme(legend.position = "bottom")
ggplot(dialect_data, aes(age_group_ordered, fill = foot_strut)) +
geom_bar(position="fill") +
xlab("age group") +
theme(legend.position = "bottom") +
scale_fill_manual(values = c("red", "yellow"))
#my ggplot with new colours
ggplot(dialect_data, aes(age_group_ordered, fill = foot_strut)) +
geom_bar(position="fill") +
scale_fill_brewer(palette="Set1")
## LOAD PACKAGES ####
library(dplyr) # this is a package that makes handling data easier
library(ggplot2) # this is a package that makes nice graphs
## LOAD IN DATA ####
rt_data = read.delim("HSS8005_reactiondata.txt")
dim(rt_data)
head(rt_data)
tail(rt_data)
colnames(rt_data)
# Look at factor levels for some columns
levels(rt_data$group)
levels(rt_data$type)
table(rt_data$group)
table(rt_data$type)
levels(rt_data$rt)
summary(rt_data$rt)
boxplot(rt_data$rt ~ rt_data$type)
# plot and run the group variable in this chunk
hist(rt_data$rt)
ggplot(rt_data, aes(x = group, y = rt)) +
geom_boxplot()
ggplot(rt_data, aes(x = group, y = rt, colour = group)) +
geom_boxplot()
ggplot(rt_data, aes(x = group, y = rt, fill = group)) +
geom_boxplot()
ggplot(rt_data, aes(x=group, y=rt, fill=group)) + geom_boxplot() +
scale_fill_brewer(palette="Spectral")
bl_data = subset(rt_data, group =="bilingual")
dim(bl_data)
head(bl_data)
tail(bl_data)
ggplot(bl_data, aes(x=type, y=rt, fill=type)) + geom_boxplot()
ggplot(bl_data, aes(x=type, y=rt, colour=type)) + geom_boxplot() +
ylab("reaction time (ms)") +
xlab("") +
scale_colour_brewer(palette = "Set1") +
theme_bw()
bl_data_dplyr = rt_data %>%
filter(group == "bilingual")
dim(bl_data_dplyr)
head(bl_data_dplyr)
tail(bl_data_dplyr)
rt_data %>%
filter(group == "bilingual") %>%
ggplot(aes(x=type, y=rt, colour=type)) + geom_boxplot()
bl_data_dplyr = rt_data %>%
filter(group != "monolingual")
quick_rt_data = rt_data %>%
filter(rt < 1000)
rt_data %>%
filter(rt < 1000) %>%
ggplot(aes(x=group, y=rt, colour=group)) + geom_boxplot()
1+3
1+3
## LOAD PACKAGES ####
library(dplyr) # this is a package that makes handling data easier
library(ggplot2) # this is a package that makes nice graphs
## LOAD IN DATA ####
dialect_data = read.csv("HSS8005_dialectdata.csv")
dim(dialect_data)
head(dialect_data)
tail(dialect_data)
colnames(dialect_data)
table(dialect_data$foot_strut)
table(dialect_data$foot_strut, dialect_data$age_group)
#your code here for your choice of independent variable
foot_strut.tab = table(dialect_data$foot_strut, dialect_data$age_group)
foot_strut.tab
prop.table(foot_strut.tab, 2)
foot_strut.prop.tab = prop.table(foot_strut.tab, 2)
# WRONG WAY AROUND
prop.table(foot_strut.tab, 1)
dialect_data %>%
group_by(age_group) %>% # the independent variable
count(foot_strut) %>% # the dependent variable
mutate(prop = prop.table(n))
# here you can look at another independent variable's affect on foot_strut
barplot(foot_strut.tab)
#create a barplot with the proportions of foot_strut instead of raw numbers
levels(dialect_data$age_group)
# reordering
dialect_data$age_group_ordered = factor(dialect_data$age_group,levels(dialect_data$age_group)[c(3, 1, 2)])
#having a look at new order
levels(dialect_data$age_group_ordered)
ggplot(dialect_data, aes(age_group_ordered, fill = foot_strut)) +
geom_bar(position="fill")
ggplot(dialect_data, aes(age_group_ordered, fill = foot_strut)) +
geom_bar(position="fill") +
xlab("age group")
ggplot(dialect_data, aes(age_group_ordered, fill = foot_strut)) +
geom_bar(position="fill") +
xlab("age group") +
theme(legend.position = "bottom")
ggplot(dialect_data, aes(age_group_ordered, fill = foot_strut)) +
geom_bar(position="fill") +
xlab("age group") +
theme(legend.position = "bottom") +
scale_fill_manual(values = c("red", "yellow"))
#my ggplot with new colours
ggplot(dialect_data, aes(age_group_ordered, fill = foot_strut)) +
geom_bar(position="fill") +
scale_fill_brewer(palette="Set1")
1+3
1+3
## LOAD PACKAGES ####
library(dplyr) # this is a package that makes handling data easier
library(ggplot2) # this is a package that makes nice graphs
## LOAD IN DATA ####
dialect_data = read.csv("HSS8005_dialectdata.csv")
dim(dialect_data)
head(dialect_data)
tail(dialect_data)
colnames(dialect_data)
# Look at factor levels for some columns
levels(dialect_data$foot_strut)
levels(dialect_data$give_it_me)
table(dialect_data$foot_strut)
table(dialect_data$foot_strut, dialect_data$age_group)
#your code here for your choice of independent variable
foot_strut.tab = table(dialect_data$foot_strut, dialect_data$age_group)
foot_strut.tab
prop.table(foot_strut.tab, 2)
foot_strut.prop.tab = prop.table(foot_strut.tab, 2)
# WRONG WAY AROUND
prop.table(foot_strut.tab, 1)
1+3
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
ing_data = read.csv("ing.csv")
dim(ing_data)
head(ing_data)
tail(ing_data)
colnames(ing_data)
levels(ing_data$realisation)
table(ing_data$realisation)
ggplot(ing_data, aes(grammatical_cat, fill = realisation)) + geom_bar(position = "fill")
ggplot(ing_data, aes(fol_seg, fill = realisation)) + geom_bar(position = "fill")
levels(ing_data$fol_seg)
ing_data = ing_data %>%
mutate(fol_context = recode(fol_seg,
"AA" = "vowel", "AE" = "vowel", "AH" = "vowel", "AO" = "vowel",
"AW" = "vowel", "AY" = "vowel", "B" = "consonant",
"CH" = "consonant", "D"  = "consonant", "DH" = "consonant",
"EH"  = "vowel", "ER"  = "vowel", "EY" = "vowel",
"F"  = "consonant", "G"  = "consonant", "HH"  = "consonant",
"IH" = "vowel", "IY"  = "vowel", "K"  = "consonant",
"L"  = "consonant",  "M" = "consonant",  "N"  = "consonant",
"ns" = "pause", "OW" = "vowel", "P"  = "consonant",
"R"  = "consonant", "S"  = "consonant", "SH" = "consonant",
"sp"  = "pause", "T" = "consonant",  "TH" = "consonant",
"V" = "consonant",  "W" = "consonant",  "Y" = "consonant" ))
ggplot(ing_data, aes(fol_context, fill = realisation)) + geom_bar(position = "fill")
social = read.csv("social.csv")
social
colnames(ing_data)
colnames(social)
levels(ing_data$file)
levels(social$file)
ing_data = left_join(ing_data, social)
ggplot(ing_data, aes(sex, fill = realisation)) + geom_bar(position="fill") +
facet_wrap(~social_class)
ing_sex.tbl = table(ing_data$realisation, ing_data$sex)
ing_sex.tbl
# chi-square test on our table
chisq.test(ing_sex.tbl, correct = FALSE)
# making a plot of speech rate by age
ggplot(ing_data,  aes(age, vowels_per_second))+
geom_point()
# making a plot of speech rate, smoothing line
ggplot(ing_data,  aes(age, vowels_per_second))+
stat_smooth()+ #smoothing line
geom_point()
# making a plot of speech rate, straight line
ggplot(ing_data,  aes(age, vowels_per_second))+
stat_smooth(method="lm")+
geom_point()+
ylab("Vowels per second") + #change y axis to this
theme_bw() + #gets rid of grey background
theme(legend.position="none")
# making a plot of speech rate, straight line, colour
ggplot(ing_data,  aes(age, vowels_per_second))+
stat_smooth(method="lm")+
geom_point(aes(colour=name))+
ylab("Vowels per second") + #change y axis to this
theme_bw() + #gets rid of grey background
theme(legend.position="bottom")
head(ing_data)
cor(ing_data$vowels_per_second, ing_data$age)
head(ChickWeight)
ggplot(ChickWeight, aes(Time, weight)) + geom_point() + stat_smooth(method="lm")
mod = lm(weight ~ Time, data = ChickWeight)
summary(mod)
mod_vps = lm(vowels_per_second ~ age, data = ing_data)
summary(mod_vps)
mod_ing_age = glm(realisation ~ age, data = ing_data, family = "binomial")
summary(mod_ing_age)
mod_vps_class = lm(vowels_per_second ~ social_class, data = ing_data)
summary(mod_vps_class)
mod_social = lm(vowels_per_second ~ social_class + age + sex, data = ing_data)
summary(mod_social)
mod_nosocial = lm(vowels_per_second ~ age + sex, data = ing_data)
anova(mod_social, mod_nosocial)
library(lme4) # needed for mixed effects regression (remember to install first time)
mod_lmer = lmer(vowels_per_second ~ social_class + age + sex + fol_context + grammatical_cat + (1|word) + (1|name), data = ing_data)
summary(mod_lmer)
mod_glmer = glmer(realisation ~ social_class + age + sex + fol_context + grammatical_cat + (1|word) + (1|name), data = ing_data, family = "binomial")
summary(mod_glmer)
mod_social = lm(vowels_per_second ~ social_class + age + sex, data = ing_data)
summary(mod_social)
